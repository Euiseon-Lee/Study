class Solution {
    public int solution(String number) {
        /**
         * 문자열로 주어진 큰 수를 9로 나눈 나머지를 계산하는 메서드입니다.
         *
         * 💡 문제 배경:
         * 어떤 자연수 n을 9로 나눈 나머지는 각 자리수의 합을 9로 나눈 나머지와 동일합니다.
         * 이 수학적 성질을 활용하여, 매우 큰 수의 나머지를 효과적으로 계산할 수 있습니다.
         *
         * ✅ 코드 구현 피드백:
         * - 기존 코드에서 `number.length()` 기준으로 분기하여, 숫자가 `int` 범위를 초과할 경우 자리수를 직접 더해
         *   나머지를 구하는 접근은 매우 적절한 방어 로직입니다.
         * - 다만 Integer.parseInt()는 10자리 이상에서 NumberFormatException이 발생할 수 있기 때문에,
         *   long 타입 기반의 분기 처리가 더 안전합니다.
         * - long은 약 18자리까지 커버 가능하므로, 조건 분기 기준을 18자리로 조정하는 것이 더 정확합니다.
         * - 변수명 answer → mod9Result 등으로 의미 기반 네이밍을 하면 가독성이 향상됩니다.
         *
         * ⚠ long을 사용하는 이유:
         * - int 범위: ±2,147,483,647 (10자리)
         * - long 범위: ±9,223,372,036,854,775,807 (19자리)
         * - 하지만 숫자의 앞자리가 크면 long 범위 내에서도 오버플로우가 발생할 수 있으므로, 일반적으로는
         *   18자리 이하를 안전 기준선으로 설정하는 것이 좋습니다.
         * - 이를 기반으로 분기 처리를 하면 파싱 시 예외 발생을 방지하고 코드 안정성이 향상됩니다.
         *
         * 🧠 시간 복잡도:
         * - O(n), n은 문자열 길이 (number.length())
         * - 자리수만 순회하기 때문에 매우 효율적인 방식입니다.
         *
         * @param number 문자열로 주어진 매우 큰 수
         * @return 9로 나눈 나머지 값 (0~8)
         */
        int answer = 0;
        
        // Long 범위 (일반적으로 18자리 이하)를 초과하는 경우, 직접 자리수 합산
        if (number.length() > 18) {
            for (int i = 0; i < number.length(); i++) {
                char c = number.charAt(i);
                answer += c - '0';
            }
            answer %= 9;
        } else {
            // 18자리 이하일 경우, long으로 변환 후 나머지 연산 수행
            answer = (int) (Long.parseLong(number) % 9);
        }
        return answer;
    }
}
