class Solution {
    public int solution(int[] arr, int idx) {
        /**
         * 🔍 배열 내 특정 값(1)의 인덱스 탐색 (지정 시작 위치부터)
         *
         * ✅ 문제 충실도
         * - idx 위치부터 arr 끝까지 순차적으로 탐색하면서 1이 처음 등장하는 위치를 반환 ✔
         * - 끝까지 찾지 못하면 -1 반환 → 요구된 예외 처리까지 정확히 반영 ✔
         *
         * ✅ 성능 및 구조
         * - 최악의 경우에도 O(n - idx)의 선형 시간 복잡도 → 배열 끝까지 검사
         * - 조기 반환 구조 (`return i`)를 사용하여 조건 만족 시 즉시 종료 → 불필요한 연산 없음
         * - 배열 범위 초과 없이 안전한 반복문 조건 설정 (`i < arr.length`) ✔
         *
         * ✅ 가독성과 유지보수
         * - 변수명도 간결하고 직관적이어서 코드 해석이 매우 쉬움
         * - 별도의 조건문 중첩 없이 return 조건을 바로 명시한 점이 깔끔함
         *
         * ✅ 실무 적용 팁
         * - 이런 "조건 만족 첫 원소 탐색"은 stream보다는 전통적 for문이 훨씬 효율적
         * - 같은 로직을 범용화하려면 Predicate<T>를 매개변수로 받아 일반화할 수도 있음
         *   (예: Java 8 이상의 Functional Programming 스타일로)
         *
         * ✅ 정리
         * - 간단한 문제지만 실수 없이 정확하게 조건을 구현한 구조야
         * - 불필요한 조건이나 연산 없이 곧바로 결과를 반환하는 구조도 좋고,
         * - if-return 구조는 예외 처리와 성능 양면에서 추천되는 실무 패턴이야
         */
        for (int i = idx; i <arr.length; i++) {
            if (arr[i] == 1) return i;
        }
        return -1;
    }
}
