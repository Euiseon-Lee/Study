class Solution {
    public int solution(int n) {
        /*
         * [문제 요약]
         * 정수 n이 주어질 때,
         * - n이 홀수라면: 1부터 n까지의 홀수들의 합
         * - n이 짝수라면: 1부터 n까지의 짝수들의 제곱의 합
         * 을 반환하는 함수이다.
         *
         * [홀수의 합 - 수학적 공식]
         *  - 홀수 수열: 1 + 3 + 5 + ... + (2k - 1)
         *  - 이 수열의 합은 k^2로 계산 가능 (k는 홀수의 개수)
         *  - 홀수 개수 = (1 + n) / 2
         *  → 공식: sum = ((1 + n) / 2)^2
         *
         * [짝수의 제곱합 - 수학적 공식 유도]
         *  - 짝수 수열: 2^2 + 4^2 + 6^2 + ... + (2k)^2
         *           = 4 × (1^2 + 2^2 + ... + k^2)
         *           = 4 × [k(k + 1)(2k + 1) / 6]
         *     → 여기서 k = n / 2 (짝수 개수)
         *
         *  예시:
         *     n = 6 → 짝수: 2, 4, 6 → k = 3
         *     sum = 4 × 3 × 4 × 7 / 6 = 56
         *
         * [결론]
         * - 수학 공식을 활용하면 반복 없이 O(1) 시간에 계산 가능
         * - 반복문 기반 구현도 맞지만, 공식을 활용하면 성능과 가독성 모두 향상됨
         */
        if (n % 2 == 1) {
            return (int) Math.pow((1 + n) / 2, 2);
        } else {
            /* 최초 제출 코드
            int target = 0;
            for (int i = 1; i < n/2 + 1; i++) {
                target += (int) Math.pow(2 * i, 2);
            }
            return target;
            */
            // 수학 공식 적용한 버전
            int k = n / 2;
            return 4 * k * (k + 1) * (2 * k + 1) / 6;
        }
    }
}
