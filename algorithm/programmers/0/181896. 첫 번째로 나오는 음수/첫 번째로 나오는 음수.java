class Solution {
    public int solution(int[] num_list) {
        /** 🔍 첫 번째 음수의 인덱스 찾기 – 조건 탐색과 조기 종료 패턴
         *
         * ✅ 핵심 로직
         * - 배열을 앞에서부터 순회하면서 음수를 처음 발견한 인덱스를 반환
         * - 발견되지 않으면 -1을 반환
         * - for문 내 조건문으로 조기 종료 (return) 처리
         *
         * 🧠 구조적 특징
         * - O(n) 선형 탐색 구조
         * - 탐색 중 첫 음수를 만나면 즉시 종료하므로 평균 실행 시간은 짧은 편
         * - 조건 분기 없이 단순 비교로 흐름이 명확
         *
         * 🚀 성능 평가
         * - 모든 테스트 케이스에서 0.01~0.03ms로 고르게 빠른 결과
         * - 배열 길이가 길어져도 음수가 앞쪽에 위치하면 빠르게 종료 가능
         * - 메모리도 약 68MB~92MB 사이로 안정적
         *
         * ✅ 코드 간결성 장점
         * - Java에서 가장 전형적인 순차 조건 탐색 패턴
         * - 불필요한 변수 없이 루프와 조건문만으로 정확한 결과 도출
         *
         * 📌 실무적 시사점
         * 1. ✅ 조건 만족 여부만 찾을 경우, 조기 종료 구조를 우선 고려할 것
         * 2. ✅ 조건 분기 없이 단일 루프 흐름이 유지되는 구조가 가장 오류 발생 가능성이 낮음
         * 3. ⚠️ 배열이 null일 수 있는 상황에서는 사전에 null 체크를 추가해야 함 (예: API 입력)
         * 4. ✨ 동일한 구조는 indexOf, stream, filter 등으로 대체 가능하나, 이 방식이 가장 빠르고 직관적
         *
         * 🎯 학습 포인트
         * - 성능이 중요한 조건 탐색 문제에서는 조기 return 구조가 가장 효과적
         * - 무조건 stream이나 람다식을 쓰는 것보다, 명확한 목적이 있을 때 간결한 루프가 낫다는 감각을 유지할 것
         * - 향후에는 Predicate 조건이 여러 개인 경우를 대비해 조건 블록을 함수 분리하는 훈련도 필요
         */
        for (int i = 0; i < num_list.length; i++) {
            if (num_list[i] < 0) {
                return i;
            }
        }
        return -1;
    }
}
